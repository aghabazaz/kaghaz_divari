<?phpclass contentMapper extends \f\dal{    public $sqlEngine;    private $dataTable;    private $content_tbl = 'cms_content';    private $content_related_tbl = 'cms_content_related';    private $content_tag_tbl = 'cms_content_tag';    //private $content_people_tbl='wiki_people_cms';    public function __construct ()    {        $this->sqlEngine = new \f\sqlStorageEngine;        $this->dataTable = \f\dalFactory::make( 'core.dataTable' );    }    public function contentList ()    {        $pr = $this->request->getAssocParams();        $requestDataTable = $pr['dataTableParams'];        //\f\pr($pr);        $ownerId = \f\ttt::dal( 'core.auth.getUserOwner' );        if ( !$ownerId )        {            $ownerId = \f\ttt::dal( 'core.auth.getOwnerFront' );        }        $columns = [            [                'db' => $this->content_tbl . '.id', //column name selected                'dt' => 0, //column num            ],            [                'db' => $this->content_tbl . '.title',                'dt' => 1,            ],            [                'db' => $this->content_tbl . '.date_register',                'dt' => 3,            ],            [                'db' => $this->content_tbl . '.status',                'dt' => 4,            ],            [                'db' => $this->content_tbl . '.visit',                'dt' => 2,            ],            [                'db' => $this->content_tbl . '.special',                'dt' => 5,            ],        ];        $whereJoin = [            'owner_id = ' . $ownerId,        ];        if ( $pr['member_id'] )        {            $whereJoin = [                'owner_id = ' . $ownerId . ' AND member_id=' . $pr['member_id'],            ];        }        $result = [            'requestDataTble' => $requestDataTable,            'tableName' => $this->content_tbl,            'primaryKey' => $this->content_tbl . '.id',            'columnsArray' => $columns,            'tableJoinName' => $tbjoins = [],            'whereJoin' => $whereJoin        ];        $out = $this->dataTable->getDataTable( $result );        return $out;    }    public function contentSave ()    {        $params = $this->request->getAssocParams();        $ownerId = \f\ttt::dal( 'core.auth.getUserOwner' );        if ( !$ownerId )        {            $ownerId = \f\ttt::dal( 'core.auth.getOwnerFront' );        }        $userId = \f\ttt::dal( 'core.auth.getUserId' );        //\f\pre($params);        $result = $this->sqlEngine->save( $this->content_tbl,            [                'owner_id' => $ownerId,                'core_userid' => $userId ? $userId : NULL,                'member_id' => $params['member_id'] ? $params['member_id'] : NULL,                'title' => $params['title'],                'short' => $params['short'],                'content' => $params['content'],                'picture' => $params['picture'] ? $params['picture'] : 35,                'section' => $params['section'],                'tag' => json_encode( $params['tag'] ),                'related' => json_encode( $params['related_content'] ),                'date_update' => time(),                'user_update_id' => $userId,                'date_register' => time(),            ] );        $id = $this->sqlEngine->last_id();        $this->save_related_param( $params,$id );        return $result;    }    public function save_related_param ( $params,$id )    {        if ( is_array( $params['tag'] ) )        {            foreach ( $params['tag'] AS $data )            {                $result = $this->sqlEngine->save( $this->content_tag_tbl,                    [                        'content_id' => $id,                        'tag_id' => $data,                    ]                );            }        }        if ( is_array( $params['related_content'] ) )        {            foreach ( $params['related_content'] AS $data )            {                $result = $this->sqlEngine->save( $this->content_related_tbl,                    [                        'content_id' => $id,                        'related_id' => $data,                    ]                );            }        }    }    public function contentSaveEdit ()    {        $params = $this->request->getAssocParams();        $params['people'] = explode( ',',$params['people'] );        //\f\pre($params);        //$ownerId = \f\ttt::dal ( 'core.auth.getUserOwner' ) ;        $userId = \f\ttt::dal( 'core.auth.getUserId' );        $result = $this->sqlEngine->save( $this->content_tbl,            [                'member_id' => $params['member_id'] ? $params['member_id'] : NULL,                'title' => $params['title'],                'short' => $params['short'],                'content' => $params['content'],                'picture' => $params['picture'] ? $params['picture'] : 35,                'section' => $params['section'],                'tag' => json_encode( $params['tag'] ),                'related' => json_encode( $params['related_content'] ),                'date_update' => time(),                'user_update_id' => $userId,            ],            [                'id=?',                [                    $params['id'] ] ] );        $this->sqlEngine->remove( $this->content_tag_tbl,            [                'content_id=?',                [                    $params['id'] ] ] );        $this->sqlEngine->remove( $this->content_related_tbl,            [                'content_id=?',                [                    $params['id'] ] ] );        $this->save_related_param( $params,$params['id'] );        return $result;    }    public function contentDelete ()    {        $param = $this->request->getAssocParams();        $id = $param['id'];        $this->sqlEngine->remove( $this->content_tbl,            [                'id=?',                [                    $id ] ] );        return [            'result' => 'success',            'func' => 'remove' ];    }    public function contentStatus ()    {        $param = $this->request->getAssocParams();        $id = $param['id'];        $status = $param['status'] == 'enabled' ? 'disabled' : 'enabled';        $this->sqlEngine->save( $this->content_tbl,            [                'status' => $status            ],            [                'id=?',                [                    $id ] ] );        return [            'result' => 'success',            'status' => $status,            'id' => $id,            'func' => 'status' ];    }    public function getContentById ()    {        $param = $this->request->getAssocParams();        $this->sqlEngine->Select( 't1.*' )            ->From( $this->content_tbl . ' AS t1' )            ->Where( 't1.id=?',$param['id'] )            ->Run();        return $this->sqlEngine->getRow();    }    public function getContentByOwnerId ()    {        $ownerId = \f\ttt::dal( 'core.auth.getUserOwner' );        $param = $this->request->getAssocParams();        $this->sqlEngine->Select()            ->From( $this->content_tbl )            ->Where( 'owner_id=?',$ownerId )            ->andWhere( 'status=?','enabled' )            ->OrderBy( 'title ASC' )            ->Run();        return $this->sqlEngine->getRows();    }    public function getContentList ()    {        //$ownerId = \f\ttt::dal ( 'core.auth.getUserOwner' ) ;        $param = $this->request->getAssocParams();        //\f\pr($param);        $this->sqlEngine->Select()            ->From( $this->content_tbl )            ->Where( 'status=?',$param['status'] );        if ( $param['special'] )        {            $this->sqlEngine->andWhere( 'special=?',$param['special'] );        }        $this->sqlEngine->OrderBy( 'id DESC' )            ->Limit( $param['limit'] )            ->Run();        return $this->sqlEngine->getRows();    }    public function getContentRelatedByOwnerId ()    {        $ownerId = \f\ttt::dal( 'core.auth.getUserOwner' );        if ( !$ownerId )        {            $ownerId = \f\ttt::dal( 'core.auth.getOwnerFront' );        }        $param = $this->request->getAssocParams();        $this->sqlEngine->Select()            ->From( $this->content_tbl )            ->Where( 'owner_id=?',$ownerId )            ->andWhere( 'status=?','enabled' );        if ( $param['member_id'] )        {            $this->sqlEngine->andWhere( 'member_id=?',$param['member_id'] );        }        $this->sqlEngine->OrderBy( 'id DESC' )            ->Limit( 300 )            ->Run();        return $this->sqlEngine->getRows();    }    public function getMainPageContent ()    {        $ownerId = \f\ttt::dal( 'core.auth.getOwnerFront' );        $param = $this->request->getAssocParams();        //\f\pr($param);        $this->sqlEngine->Select( 't1.*,t2.name AS fileName,t2.path' )            ->From( $this->content_tbl . ' AS t1' )            ->Join( 'core_file AS t2' )            ->Where( 't1.owner_id=?',$ownerId )            ->andWhere( 't1.status=?','enabled' )            ->andWhere( 't1.mainpage LIKE ?','%' . $param['type'] . '%' )            ->andWhere( 't1.picture=t2.id' )            ->OrderBy( 't1.id DESC' )            ->Limit( $param['limit'] )            ->Run();        //\f\pr($this->sqlEngine->last_query());        return $this->sqlEngine->getRows();    }    public function getMainPageContentBySection ()    {        $ownerId = \f\ttt::dal( 'core.auth.getOwnerFront' );        $param = $this->request->getAssocParams();        //\f\pr($param);        $this->sqlEngine->Select( 't1.*,t3.title AS cat_title,t4.name AS fileName,t4.path' )            ->From( $this->content_tbl . ' AS t1' )            ->Join( $this->content_section_tbl . ' AS t2' )            ->Join( 'cms_category AS t3' )            ->Join( 'core_file AS t4' )            ->Where( 't1.owner_id=?',$ownerId )            ->andWhere( 't1.status=?','enabled' )            ->andWhere( 't1.id=t2.content_id' )            ->andWhere( 't2.section_id=t3.id' )            ->andWhere( 't3.homepage=?',$param['position'] )            ->andWhere( 't1.mainpage LIKE ?','%category%' )            ->andWhere( 't1.picture=t4.id' )            ->OrderBy( 't1.id DESC' )            ->Limit( $param['limit'] )            ->Run();        return $this->sqlEngine->getRows();    }    public function getMainPageContentByState ()    {        $ownerId = \f\ttt::dal( 'core.auth.getOwnerFront' );        $param = $this->request->getAssocParams();        //\f\pr($param);        $this->sqlEngine->Select( 't1.*,t2.name AS fileName,t2.path' )            ->From( $this->content_tbl . ' AS t1' )            ->Join( 'core_file AS t2' )            ->Where( 't1.owner_id=?',$ownerId )            ->andWhere( 't1.status=?','enabled' )            ->andWhere( 't1.state=?',$param['stateId'] )            ->andWhere( 't1.mainpage LIKE ?','%state%' )            ->andWhere( 't1.picture=t2.id' )            ->OrderBy( 't1.id DESC' )            ->Limit( $param['limit'] )            ->Run();        return $this->sqlEngine->getRows();    }    public function setContentVisit ()    {        $param = $this->request->getAssocParams();        $this->sqlEngine->Update( $this->content_tbl )            ->setField( 'visit=visit+1' )            ->Where( 'id=?',$param['id'] )            ->Run();    }    public function getMostVisitedNews ()    {        $ownerId = \f\ttt::dal( 'core.auth.getOwnerFront' );        $param = $this->request->getAssocParams();        $time = strtotime( "-10 day" );        $this->sqlEngine->Select( 't1.*,t2.name AS fileName,t2.path' )            ->From( $this->content_tbl . ' AS t1' )            ->Join( 'core_file AS t2' )            ->Where( 't1.owner_id=?',$ownerId )            ->andWhere( 't1.status=?','enabled' )            ->andWhere( 't1.picture=t2.id' )            ->andWhere( 'date_register >?',$time )            ->OrderBy( 't1.visit DESC' )            ->Limit( $param['limit'] )            ->Run();        return $this->sqlEngine->getRows();    }    public function getMostCommentNews ()    {        $ownerId = \f\ttt::dal( 'core.auth.getOwnerFront' );        $param = $this->request->getAssocParams();        $time = strtotime( "-10 day" );        $this->sqlEngine->Select( 'COUNT(t1.cms_id) AS count_cms, t2.*,t3.name AS fileName,t3.path' )            ->From( 'cms_comment AS t1' )            ->Join( $this->content_tbl . ' AS t2' )            ->Join( 'core_file AS t3' )            ->Where( 't2.owner_id=?',$ownerId )            ->andWhere( 't1.cms_id=t2.id' )            ->andWhere( 't2.picture=t3.id' )            ->andWhere( 't2.date_register >?',$time )            ->GroupBy( 't1.cms_id' )            ->OrderBy( 'count_cms DESC' )            ->Limit( $param['limit'] )            ->Run();        return $this->sqlEngine->getRows();    }    public function getContentKeywordById ()    {        $param = $this->request->getAssocParams();        $this->sqlEngine->Select( 't2.id,t2.title,t2.link' )            ->From( $this->content_tag_tbl . ' AS t1' )            ->Join( 'cms_tag AS t2' )            ->Where( 't1.content_id=?',$param['id'] )            ->andWhere( 't1.tag_id=t2.id' )            ->OrderBy( 't2.title ASC' )            ->Run();        return $this->sqlEngine->getRows();    }    public function getContentByParam ()    {        $param = $this->request->getAssocParams();        //\f\pre($param);        $this->sqlEngine->Select( 't1.*' )            ->From( $this->content_tbl . ' AS t1' );        if ( $param['section'] )        {            $this->sqlEngine->Where( 't1.section=?',$param['id'] );        }        $this->sqlEngine->OrderBy( 't1.title ASC' )            ->Limit( 6 )            ->Run();        return $this->sqlEngine->getRows();    }    public function getContentTagById ()    {        $params = $this->request->getAssocParams();        $this->sqlEngine->Select( 't2.title,t2.link' )            ->From( $this->content_tag_tbl . ' AS t1' )            ->Join( 'cms_tag AS t2' )            ->Where( 't1.content_id=?',$params['id'] )            ->andWhere( 't1.tag_id=t2.id' )            ->Run();        return $this->sqlEngine->getRows();    }    public function getContentRelatedById ()    {        $param = $this->request->getAssocParams();        //\f\pre($param);        $this->sqlEngine->Select( 't2.id,t2.picture,t2.title,t2.date_register' )            ->From( $this->content_related_tbl . ' AS t1' )            ->Join( $this->content_tbl . ' AS t2' )            ->Where( 't1.content_id=?',$param['id'] )            ->andWhere( 't1.related_id=t2.id' )            ->OrderBy( 't2.id DESC' )            ->Limit( 3 )            ->Run();        return $this->sqlEngine->getRows();    }    public function getAllNews ()    {        $ownerId = \f\ttt::dal( 'core.auth.getOwnerFront' );        $param = $this->request->getAssocParams();        $this->sqlEngine->Select()            ->From( $this->content_tbl )            ->Where( 'owner_id=?',$ownerId )            ->andWhere( 'status=?','enabled' )            ->OrderBy( 'id DESC' )            ->Limit( $param['limit'] )            ->Run();        return $this->sqlEngine->getRows();    }    public function getContentByCategoryId ()    {        $ownerId = \f\ttt::dal( 'core.auth.getOwnerFront' );        $param = $this->request->getAssocParams();        $min = ( $param['page'] - 1 ) * 10;        $this->sqlEngine->Select( 'id,title,date_register,short,picture' )            ->From( $this->content_tbl )            ->Where( 'owner_id=?',$ownerId )            ->andWhere( 'status=?','enabled' )            ->andWhere( 'section LIKE ?','%"' . $param['id'] . '"%' )            ->orWhere( 'state=?',$param['id'] )            ->OrderBy( 'id DESC' )            ->Limit( "$min,10" )            ->Run();        $row = $this->sqlEngine->getRows();        $this->sqlEngine->Select( 'id' )            ->From( $this->content_tbl )            ->Where( 'owner_id=?',$ownerId )            ->andWhere( 'status=?','enabled' )            ->andWhere( 'section LIKE ?','%"' . $param['id'] . '"%' )            ->orWhere( 'state=?',$param['id'] )            ->Run();        $num = $this->sqlEngine->numRows();        //\f\pr($num);        return [            $row,            $num ];    }    public function getContentByTagId ()    {        $ownerId = \f\ttt::dal( 'core.auth.getOwnerFront' );        $param = $this->request->getAssocParams();        $min = ( $param['page'] - 1 ) * 10;        //\f\pre($param);        $this->sqlEngine->Select( 'id,title,date_register,short,picture' )            ->From( $this->content_tbl )            ->Where( 'owner_id=?',$ownerId )            ->andWhere( 'status=?','enabled' )            ->andWhere( 'tag LIKE ?','%"' . $param['id'] . '"%' )            ->OrderBy( 'id DESC' )            ->Limit( "$min,10" )            ->Run();        $row = $this->sqlEngine->getRows();        $this->sqlEngine->Select( 'id' )            ->From( $this->content_tbl )            ->Where( 'owner_id=?',$ownerId )            ->andWhere( 'status=?','enabled' )            ->andWhere( 'tag LIKE ?','%"' . $param['id'] . '"%' )            ->Run();        $num = $this->sqlEngine->numRows();        //\f\pr($num);        return [            $row,            $num ];    }    public function getArchive ()    {        $ownerId = \f\ttt::dal( 'core.auth.getOwnerFront' );        $param = $this->request->getAssocParams();        $min = ( $param['page'] - 1 ) * 10;        $this->sqlEngine->Select( 'id,title,date_register,short,picture' )            ->From( $this->content_tbl )            ->Where( 'owner_id=?',$ownerId )            ->andWhere( 'status=?','enabled' )            ->andWhere( 'date_register>=?',$param['start'] )            ->andWhere( 'date_register<?',$param['end'] )            ->OrderBy( 'id DESC' )            ->Limit( "$min,10" )            ->Run();        $row = $this->sqlEngine->getRows();        $this->sqlEngine->Select( 'id' )            ->From( $this->content_tbl )            ->Where( 'owner_id=?',$ownerId )            ->andWhere( 'status=?','enabled' )            ->andWhere( 'date_register>=?',$param['start'] )            ->andWhere( 'date_register<?',$param['end'] )            ->Run();        $num = $this->sqlEngine->numRows();        //\f\pr($num);        return [            $row,            $num ];    }    public function getContent ()    {        //$ownerId = \f\ttt::dal ( 'core.auth.getUserOwner' ) ;        $param = $this->request->getAssocParams();        $num = $param['numPerPage'];        $min = ( $param['page'] - 1 ) * $num;        //\f\pre($param);        $this->sqlEngine->Select()            ->From( $this->content_tbl )            ->Where( 'status=?','enabled' );        if ( $param['section'] )        {            $this->sqlEngine->andWhere( 'section=?',$param['section'] );        }        $this->sqlEngine->OrderBy( 'id DESC' )            ->Limit( "$min,$num" )            ->Run();        $row = $this->sqlEngine->getRows();        $this->sqlEngine->Select( 'id' )            ->From( $this->content_tbl )            ->Where( 'status=?','enabled' );        if ( $param['section'] )        {            $this->sqlEngine->andWhere( 'section=?',$param['section'] );        }        $this->sqlEngine->OrderBy( 'id DESC' )            ->Run();        $num = $this->sqlEngine->numRows();        return [            $row,            $num ];    }    public function contentSpecial ()    {        $param = $this->request->getAssocParams();        $id = $param['id'];        $status = $param['status'] == 'enabled' ? 'disabled' : 'enabled';        $this->sqlEngine->save( $this->content_tbl,            [                'special' => $status            ],            [                'id=?',                [                    $id ] ] );        return [            'result' => 'success',            'status' => $status,            'id' => $id,            'func' => 'special' ];    }}