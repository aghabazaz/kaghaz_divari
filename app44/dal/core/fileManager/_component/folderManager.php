<?php//statesclass folderManager extends \f\dal{    public function __construct()    {        $this->sqlEngine = new \f\sqlStorageEngine ;    }    public function createNewFolder(\f\request $request)    {        $path        = $request->getParam('path') ;        $folderName  = $request->getParam('name') ;        $folderTitle = $request->getParam('title') ;        if ( $path == 'root' )        {            $path            = $folderName ;            $pathToNewFolder = \f\ifm::app()->uploadDir . \f\DS . $folderName ;        }        else        {            $pathDir         = str_replace('.', \f\DS, $path) ;            $path            = "$path.$folderName" ;            $pathToNewFolder = \f\ifm::app()->uploadDir . \f\DS . $pathDir . \f\DS . $folderName ;        }        if ( file_exists($pathToNewFolder) )        {            return 16 ; // folder already exists        }        mkdir($pathToNewFolder) ;        $saveArr = array (            'name'  => $folderName,            'type'  => 'folder',            'path'  => "$path",            'title' => $folderTitle                ) ;        $this->sqlEngine->save('core_file', $saveArr) ;        return 15 ; // folder created successfully    }    public function getPathInfo($path)    {        $pathParts = explode('.', $path) ;        $where       = "path IN (" ;        $growingPath = '' ;        foreach ( $pathParts as $key => $pathPart )        {            $growingPath .= (empty($growingPath) ? '' : '.') . $pathPart ;            $where .= "'$growingPath'" ;            if ( $key < count($pathParts) - 1 )            {                $where .= ", " ;            }        }        $where .= ")" ;        $this->sqlEngine->Select()                ->From('core_file')                ->Where($where)                ->Run() ;        return $this->sqlEngine->getRows() ;    }    public function getFileDetail($fileId)    {        $fileInfo                 = array () ;        $this->sqlEngine->Select()                ->From('core_file')                ->Where("id = ?", $fileId)                ->Run() ;        $fileDetail               = $this->sqlEngine->getRow() ;        $fileInfo[ 'fileDetail' ] = $fileDetail ;        $fileInfo[ 'pathInfo' ]   = $this->getPathInfo($fileDetail[ 'path' ]) ;        return $fileInfo ;    }    public function updateExistingFolder(\f\request $request)    {        $newFolderName = $request->getParam('name') ;        $folderTitle   = $request->getParam('title') ;        $fileId = $request->getParam('fileId') ;        $fileDetails = $this->getFileDetail($fileId) ;        $fileDetail  = $fileDetails[ 'fileDetail' ] ;        if ( strstr($fileDetail[ 'path' ], '.') ) // if it is sub folder        {            $parentPathDot   = substr($fileDetail[ 'path' ], 0,                                      strrpos($fileDetail[ 'path' ], '.')) ;            $parentPathDS    = str_replace('.', \f\DS, $parentPathDot) ;            $pathToNewFolder = \f\ifm::app()->uploadDir . \f\DS . $parentPathDS . \f\DS . $newFolderName ;            $pathToOldFolder = \f\ifm::app()->uploadDir . \f\DS . $parentPathDS . \f\DS . $fileDetail[ 'name' ] ;            $newFolderPath   = $parentPathDot . '.' . $newFolderName ;        }        else        {            $pathToNewFolder = \f\ifm::app()->uploadDir . \f\DS . $newFolderName ; //use            $pathToOldFolder = \f\ifm::app()->uploadDir . \f\DS . $fileDetail[ 'name' ] ; //use            $newFolderPath   = $newFolderName ; //use        }        $updateArray = array (            'name'  => $newFolderName,            'path'  => "$newFolderPath",            'title' => $folderTitle                ) ;        $this->sqlEngine->save('core_file', $updateArray,                               array (            'id = ?', array ( $fileId )        )) ;        if ( $pathToNewFolder !== $pathToOldFolder )        {            rename($pathToOldFolder, $pathToNewFolder) ;        }        return 14 ; //folder details updated successfully    }}