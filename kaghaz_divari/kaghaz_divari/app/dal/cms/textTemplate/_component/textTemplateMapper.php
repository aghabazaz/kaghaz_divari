<?phpclass textTemplateMapper extends \f\dal{    public $sqlEngine ;    private $dataTable ;    private $textTemplate_tbl = 'cms_text_template' ;    public function __construct ()    {        $this->sqlEngine = new \f\sqlStorageEngine ;        $this->dataTable = \f\dalFactory::make ( 'core.dataTable' ) ;    }    public function textTemplateList ()    {        $pr               = $this->request->getAssocParams () ;        $requestDataTable = $pr[ 'dataTableParams' ] ;        $columns = array (            array (                'db' => $this->textTemplate_tbl . '.id', //column name selected                'dt' => 0, //column num            ),            array (                'db' => $this->textTemplate_tbl . '.title',                'dt' => 1,            ),            array (                'db' => $this->textTemplate_tbl . '.status',                'dt' => 2,            ),                ) ;        $whereJoin = array(1);        $result = array (            'requestDataTble' => $requestDataTable,            'tableName'       => $this->textTemplate_tbl,            'primaryKey'      => $this->textTemplate_tbl . '.id',            'columnsArray'    => $columns,            'tableJoinName'   => $tbjoins          = array (),            'whereJoin'       => $whereJoin                ) ;        $out = $this->dataTable->getDataTable ( $result ) ;        return $out ;    }    public function textTemplateSave ()    {        $params = $this->request->getAssocParams () ;        $result = $this->sqlEngine->save ( $this->textTemplate_tbl,                                          $params ) ;        return $result ;    }    public function textTemplateSaveEdit ()    {        $params = $this->request->getAssocParams () ;        $result = $this->sqlEngine->save ( $this->textTemplate_tbl,                                           $params,                                           array (            'id=?',            array (                $params[ 'id' ] ) ) ) ;        return $result ;    }    public function textTemplateDelete ()    {        $param = $this->request->getAssocParams () ;        $id    = $param[ 'id' ] ;        $this->sqlEngine->remove ( $this->textTemplate_tbl,                                   array (            'id=?',            array (                $id ) ) ) ;        return array (            'result' => 'success',            'func'   => 'remove' ) ;    }    public function textTemplateStatus ()    {        $param  = $this->request->getAssocParams () ;        $id     = $param[ 'id' ] ;        $status = $param[ 'status' ] == 'enabled' ? 'disabled' : 'enabled' ;        $this->sqlEngine->save ( $this->textTemplate_tbl,                                 array (            'status' => $status                ),                                 array (            'id=?',            array (                $id ) ) ) ;        return array (            'result' => 'success',            'status' => $status,            'id'     => $id,            'func'   => 'status' ) ;    }    public function getTextTemplateById ()    {        $param = $this->request->getAssocParams () ;        $this->sqlEngine->Select ()                ->From ( $this->textTemplate_tbl )                ->Where ( 'id=?', $param[ 'id' ] )                ->Run () ;        return $this->sqlEngine->getRow () ;    }    public function getTextTemplateList ()    {        $param = $this->request->getAssocParams () ;        $this->sqlEngine->Select ()                ->From ( $this->textTemplate_tbl ) ;        if ( $param[ 'status' ] )        {            $this->sqlEngine->Where ( 'status=?', 'enabled' ) ;        }        if ( $param[ 'limit' ] )        {            $this->sqlEngine->Limit($param[ 'limit' ]) ;        }        $this->sqlEngine->Run () ;        return $this->sqlEngine->getRows () ;    }}